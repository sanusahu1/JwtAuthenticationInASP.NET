@page "/register"
@rendermode InteractiveServer

<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Register Page</h2>
            <EditForm Model="@Register" OnValidSubmit="RegisterClicked" FormName="registrationForm">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Name </label>
                    <InputText @bind-Value="Register.Name" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Email address</label>
                    <InputText @bind-Value="Register.Email" class="form-control"></InputText>
                    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">Password</label>
                    <InputText @bind-Value="Register.Password" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="exampleInputPassword1" class="form-label">Confirm Password</label>
                    <InputText @bind-Value="Register.ConfirmPassword" class="form-control"></InputText>
                </div>
                <button type="submit" class="btn btn-primary">Register</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public RegisterDTO Register = new();
    async Task RegisterClicked()
    {
        RegistrationResponse resopnse = await accountService.RegisterAsync(Register);
        if (!resopnse.Flag)
        {
            await js.InvokeVoidAsync("alert", resopnse.Message);
            return;
        }

        await js.InvokeVoidAsync("alert", resopnse.Message);
        Register = new();
        return;
    }
}
